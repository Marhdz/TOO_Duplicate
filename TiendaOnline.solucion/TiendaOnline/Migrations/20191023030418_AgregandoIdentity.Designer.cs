// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaOnline.Models;

namespace TiendaOnline.Migrations
{
    [DbContext(typeof(tiendaonlineDBContext))]
    [Migration("20191023030418_AgregandoIdentity")]
    partial class AgregandoIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TiendaOnline.Models.Carrito", b =>
                {
                    b.Property<string>("CarritoId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("CarritoId");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("TiendaOnline.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_CATEGORIA")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnName("NOMBRE_CATEGORIA")
                        .HasColumnType("text");

                    b.HasKey("IdCategoria")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CATEGORIA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Cupon", b =>
                {
                    b.Property<int>("IdCupon")
                        .HasColumnName("ID_CUPON");

                    b.Property<string>("CodigoCupon")
                        .HasColumnName("CODIGO_CUPON")
                        .HasColumnType("text");

                    b.Property<string>("Descripciondelcupon")
                        .HasColumnName("DESCRIPCIONDELCUPON")
                        .HasColumnType("text");

                    b.Property<bool?>("EstadoCupon")
                        .HasColumnName("ESTADO_CUPON");

                    b.Property<DateTime?>("Fechadecreacion")
                        .HasColumnName("FECHADECREACION")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Fechadevencimiento")
                        .HasColumnName("FECHADEVENCIMIENTO")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MontoCupon")
                        .HasColumnName("MONTO_CUPON")
                        .HasColumnType("decimal(2, 2)");

                    b.HasKey("IdCupon")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CUPON");
                });

            modelBuilder.Entity("TiendaOnline.Models.Departamento", b =>
                {
                    b.Property<int>("IdDepartamento")
                        .HasColumnName("ID_DEPARTAMENTO");

                    b.Property<int>("IdMunicipio")
                        .HasColumnName("ID_MUNICIPIO");

                    b.Property<string>("NombreDepartamento")
                        .HasColumnName("NOMBRE_DEPARTAMENTO")
                        .HasColumnType("text");

                    b.HasKey("IdDepartamento")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdMunicipio")
                        .HasName("TIENE_FK");

                    b.ToTable("DEPARTAMENTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Detalledeproducto", b =>
                {
                    b.Property<int>("IdDetalle")
                        .HasColumnName("ID_DETALLE");

                    b.Property<string>("Color")
                        .HasColumnName("COLOR")
                        .HasColumnType("text");

                    b.Property<string>("Escripciondeproducto")
                        .IsRequired()
                        .HasColumnName("ESCRIPCIONDEPRODUCTO")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnName("MODELO")
                        .HasColumnType("text");

                    b.Property<decimal?>("Pesokg")
                        .HasColumnName("PESOKG")
                        .HasColumnType("decimal(2, 2)");

                    b.Property<string>("Talla")
                        .HasColumnName("TALLA")
                        .HasColumnType("text");

                    b.HasKey("IdDetalle")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DETALLEDEPRODUCTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Detalledevendedor", b =>
                {
                    b.Property<int>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<string>("Correocomercial")
                        .HasColumnName("CORREOCOMERCIAL")
                        .HasColumnType("text");

                    b.Property<int?>("DirIdDireccion")
                        .HasColumnName("DIR_ID_DIRECCION");

                    b.Property<int?>("IdDireccion")
                        .HasColumnName("ID_DIRECCION");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnName("ID_EMPRESA");

                    b.Property<string>("IdRegistro")
                        .HasColumnName("ID_REGISTRO")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("IdTarjeta")
                        .HasColumnName("ID_TARJETA");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("Nombrecomercial")
                        .HasColumnName("NOMBRECOMERCIAL")
                        .HasColumnType("text");

                    b.Property<int?>("TarIdTarjeta")
                        .HasColumnName("TAR_ID_TARJETA");

                    b.HasKey("IdVendedor")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DirIdDireccion")
                        .HasName("DIRECCIONDELVENDEDOR_FK");

                    b.HasIndex("IdDireccion")
                        .HasName("UBICACIONDELNEGOCIO_FK");

                    b.HasIndex("IdEmpresa")
                        .HasName("POSEEDATOSDE2_FK");

                    b.HasIndex("IdRegistro")
                        .HasName("REGISTRA_FK");

                    b.HasIndex("IdTarjeta")
                        .HasName("PAGOYGANANCIASPOR_FK");

                    b.HasIndex("IdUsuario")
                        .HasName("PUEDEREPRESENTAR_FK");

                    b.HasIndex("TarIdTarjeta")
                        .HasName("TARJETACOMERCIAL_FK");

                    b.ToTable("DETALLEDEVENDEDOR");
                });

            modelBuilder.Entity("TiendaOnline.Models.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .HasColumnName("ID_DIRECCION");

                    b.Property<int?>("Codigopostal")
                        .HasColumnName("CODIGOPOSTAL");

                    b.Property<string>("Direcciondetallada")
                        .HasColumnName("DIRECCIONDETALLADA")
                        .HasColumnType("text");

                    b.Property<int>("IdDepartamento")
                        .HasColumnName("ID_DEPARTAMENTO");

                    b.Property<int?>("IdSucursal")
                        .HasColumnName("ID_SUCURSAL");

                    b.HasKey("IdDireccion")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDepartamento")
                        .HasName("POSEE_FK");

                    b.HasIndex("IdSucursal")
                        .HasName("UBICACIONDE_SUCURSAL_FK");

                    b.ToTable("DIRECCION");
                });

            modelBuilder.Entity("TiendaOnline.Models.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .HasColumnName("ID_EMPRESA");

                    b.Property<string>("CorreoAtencionalcliente")
                        .HasColumnName("CORREO_ATENCIONALCLIENTE")
                        .HasColumnType("text");

                    b.Property<int?>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<int?>("TelefonoAtencionalcliente")
                        .HasColumnName("TELEFONO_ATENCIONALCLIENTE");

                    b.HasKey("IdEmpresa")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdVendedor")
                        .HasName("POSEEDATOSDE_FK");

                    b.ToTable("EMPRESA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Estadodeorden", b =>
                {
                    b.Property<int>("IdEstadodeorden")
                        .HasColumnName("ID_ESTADODEORDEN");

                    b.Property<bool?>("EstadoDeorden1")
                        .HasColumnName("ESTADO_DEORDEN");

                    b.HasKey("IdEstadodeorden")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("ESTADODEORDEN");
                });

            modelBuilder.Entity("TiendaOnline.Models.Lineadeorden", b =>
                {
                    b.Property<int>("IdLineadeorden")
                        .HasColumnName("ID_LINEADEORDEN");

                    b.Property<int?>("Cantidaddeproducto")
                        .HasColumnName("CANTIDADDEPRODUCTO");

                    b.Property<int?>("IdOrden")
                        .HasColumnName("ID_ORDEN");

                    b.Property<int?>("IdProducto")
                        .HasColumnName("ID_PRODUCTO");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnName("SUBTOTAL")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("IdLineadeorden")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdOrden")
                        .HasName("SECOMPONEPOR_FK");

                    b.HasIndex("IdProducto")
                        .HasName("TENDRA_FK");

                    b.ToTable("LINEADEORDEN");
                });

            modelBuilder.Entity("TiendaOnline.Models.Metododeenvio", b =>
                {
                    b.Property<int>("IdMetododeenvio")
                        .HasColumnName("ID_METODODEENVIO");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnName("ID_EMPRESA");

                    b.Property<int?>("Maxdediasdeenvio")
                        .HasColumnName("MAXDEDIASDEENVIO");

                    b.Property<int?>("Mindediasdeenvio")
                        .HasColumnName("MINDEDIASDEENVIO");

                    b.Property<decimal?>("Montoporenvio")
                        .HasColumnName("MONTOPORENVIO")
                        .HasColumnType("decimal(2, 2)");

                    b.Property<string>("NombreMetododeenvio")
                        .HasColumnName("NOMBRE_METODODEENVIO")
                        .HasColumnType("text");

                    b.HasKey("IdMetododeenvio")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdEmpresa")
                        .HasName("BRINDA_FK");

                    b.ToTable("METODODEENVIO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Municipio", b =>
                {
                    b.Property<int>("IdMunicipio")
                        .HasColumnName("ID_MUNICIPIO");

                    b.Property<string>("NombreMunicipio")
                        .HasColumnName("NOMBRE_MUNICIPIO")
                        .HasColumnType("text");

                    b.HasKey("IdMunicipio")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("MUNICIPIO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Orden", b =>
                {
                    b.Property<int>("IdOrden")
                        .HasColumnName("ID_ORDEN");

                    b.Property<DateTime?>("Fechadecompra")
                        .HasColumnName("FECHADECOMPRA")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdCupon")
                        .HasColumnName("ID_CUPON");

                    b.Property<int?>("IdEstadodeorden")
                        .HasColumnName("ID_ESTADODEORDEN");

                    b.Property<int?>("IdMetododeenvio")
                        .HasColumnName("ID_METODODEENVIO");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("ID_USUARIO");

                    b.Property<decimal?>("Total")
                        .HasColumnName("TOTAL")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("IdOrden")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdCupon")
                        .HasName("DISMINUIDAPOR_FK");

                    b.HasIndex("IdEstadodeorden")
                        .HasName("PUEDETENER_FK");

                    b.HasIndex("IdMetododeenvio")
                        .HasName("ENVIOS_FK");

                    b.HasIndex("IdUsuario")
                        .HasName("SOLICITA_FK");

                    b.ToTable("ORDEN");
                });

            modelBuilder.Entity("TiendaOnline.Models.Paypal", b =>
                {
                    b.Property<int>("IdPaypal")
                        .HasColumnName("ID_PAYPAL");

                    b.Property<string>("CorreoPaypal")
                        .HasColumnName("CORREO_PAYPAL")
                        .HasColumnType("text");

                    b.Property<string>("PsswdPaypal")
                        .HasColumnName("PSSWD_PAYPAL")
                        .HasColumnType("text");

                    b.HasKey("IdPaypal")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("PAYPAL");
                });

            modelBuilder.Entity("TiendaOnline.Models.ProdCarrito", b =>
                {
                    b.Property<int>("ProdCarritoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("CarritoId");

                    b.Property<int?>("ProductoIdProducto");

                    b.HasKey("ProdCarritoId");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoIdProducto");

                    b.ToTable("ProdCarrito");
                });

            modelBuilder.Entity("TiendaOnline.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnName("ID_PRODUCTO");

                    b.Property<string>("Codigodeproducto")
                        .IsRequired()
                        .HasColumnName("CODIGODEPRODUCTO")
                        .HasColumnType("text");

                    b.Property<int>("Existencia")
                        .HasColumnName("EXISTENCIA");

                    b.Property<int>("IdDetalle")
                        .HasColumnName("ID_DETALLE");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnName("ID_EMPRESA");

                    b.Property<int>("IdSubcategoria")
                        .HasColumnName("ID_SUBCATEGORIA");

                    b.Property<int?>("IdTipodedescuento")
                        .HasColumnName("ID_TIPODEDESCUENTO");

                    b.Property<int?>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<byte[]>("ImgProducto")
                        .IsRequired()
                        .HasColumnName("IMG_PRODUCTO")
                        .HasColumnType("image");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnName("NOMBRE_PRODUCTO")
                        .HasColumnType("text");

                    b.Property<decimal>("Preciounitario")
                        .HasColumnName("PRECIOUNITARIO")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("IdProducto")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDetalle")
                        .HasName("DESCRITO_FK");

                    b.HasIndex("IdEmpresa")
                        .HasName("HACEPUBLICIDAD_FK");

                    b.HasIndex("IdSubcategoria")
                        .HasName("ES_FK");

                    b.HasIndex("IdTipodedescuento")
                        .HasName("DESCUENTO_FK");

                    b.HasIndex("IdVendedor")
                        .HasName("VENDIDOPOR_FK");

                    b.ToTable("PRODUCTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Registrodeproductos", b =>
                {
                    b.Property<string>("IdRegistro")
                        .HasColumnName("ID_REGISTRO")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("IdProducto")
                        .HasColumnName("ID_PRODUCTO");

                    b.HasKey("IdRegistro")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdProducto")
                        .HasName("VENDE_FK");

                    b.ToTable("REGISTRODEPRODUCTOS");
                });

            modelBuilder.Entity("TiendaOnline.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .HasColumnName("ID_ROL");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("NombreRol")
                        .HasColumnName("NOMBRE_ROL")
                        .HasColumnType("text");

                    b.HasKey("IdRol")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdUsuario")
                        .HasName("PUEDESER2_FK");

                    b.ToTable("ROL");
                });

            modelBuilder.Entity("TiendaOnline.Models.Subcategoria", b =>
                {
                    b.Property<int>("IdSubcategoria")
                        .HasColumnName("ID_SUBCATEGORIA");

                    b.Property<int>("IdCategoria")
                        .HasColumnName("ID_CATEGORIA");

                    b.Property<string>("NombreSubcategoria")
                        .IsRequired()
                        .HasColumnName("NOMBRE_SUBCATEGORIA")
                        .HasColumnType("text");

                    b.HasKey("IdSubcategoria")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdCategoria")
                        .HasName("PERTENECE_FK");

                    b.ToTable("SUBCATEGORIA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Sucursal", b =>
                {
                    b.Property<int>("IdSucursal")
                        .HasColumnName("ID_SUCURSAL");

                    b.Property<int?>("IdDireccion")
                        .HasColumnName("ID_DIRECCION");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnName("ID_EMPRESA");

                    b.Property<string>("NombreSucursal")
                        .HasColumnName("NOMBRE_SUCURSAL")
                        .HasColumnType("text");

                    b.HasKey("IdSucursal")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDireccion")
                        .HasName("UBICACIONDE_SUCURSAL2_FK");

                    b.HasIndex("IdEmpresa")
                        .HasName("SEDISTRIBUYE_FK");

                    b.ToTable("SUCURSAL");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tarjeta", b =>
                {
                    b.Property<int>("IdTarjeta")
                        .HasColumnName("ID_TARJETA");

                    b.Property<int?>("CodigoTarjeta")
                        .HasColumnName("CODIGO_TARJETA");

                    b.Property<DateTime?>("FechadevencimientoTarjeta")
                        .HasColumnName("FECHADEVENCIMIENTO_TARJETA")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<string>("Tipodetarjeta")
                        .HasColumnName("TIPODETARJETA")
                        .HasColumnType("text");

                    b.HasKey("IdTarjeta")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdVendedor")
                        .HasName("TARJETACOMERCIAL2_FK");

                    b.ToTable("TARJETA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tipodedescuento", b =>
                {
                    b.Property<int>("IdTipodedescuento")
                        .HasColumnName("ID_TIPODEDESCUENTO");

                    b.Property<decimal?>("Montodedescuento")
                        .HasColumnName("MONTODEDESCUENTO")
                        .HasColumnType("decimal(2, 2)");

                    b.Property<string>("Nombredeldescuento")
                        .HasColumnName("NOMBREDELDESCUENTO")
                        .HasColumnType("text");

                    b.Property<decimal?>("Porcentajededescuento")
                        .HasColumnName("PORCENTAJEDEDESCUENTO")
                        .HasColumnType("decimal(2, 2)");

                    b.HasKey("IdTipodedescuento")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("TIPODEDESCUENTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tipodepago", b =>
                {
                    b.Property<int>("IdTipodepago")
                        .HasColumnName("ID_TIPODEPAGO");

                    b.Property<int?>("IdPaypal")
                        .HasColumnName("ID_PAYPAL");

                    b.Property<int?>("IdTarjeta")
                        .HasColumnName("ID_TARJETA");

                    b.HasKey("IdTipodepago")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdPaypal")
                        .HasName("SEREALIZACON_FK");

                    b.HasIndex("IdTarjeta")
                        .HasName("COMPRACON_FK");

                    b.ToTable("TIPODEPAGO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tipodevendedor", b =>
                {
                    b.Property<int>("IdTipodevendedor")
                        .HasColumnName("ID_TIPODEVENDEDOR");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("ID_USUARIO");

                    b.Property<int?>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<string>("Tipodevendedor1")
                        .HasColumnName("TIPODEVENDEDOR")
                        .HasColumnType("text");

                    b.HasKey("IdTipodevendedor")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdUsuario")
                        .HasName("PUEDE_SER2_FK");

                    b.HasIndex("IdVendedor")
                        .HasName("SEDETALLA_FK");

                    b.ToTable("TIPODEVENDEDOR");
                });

            modelBuilder.Entity("TiendaOnline.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnName("ID_USUARIO");

                    b.Property<string>("ApellidoUsuario")
                        .HasColumnName("APELLIDO_USUARIO")
                        .HasColumnType("text");

                    b.Property<string>("CorreoUsuario")
                        .HasColumnName("CORREO_USUARIO")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Fechadenacimiento")
                        .HasColumnName("FECHADENACIMIENTO")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdDireccion")
                        .HasColumnName("ID_DIRECCION");

                    b.Property<int>("IdRol")
                        .HasColumnName("ID_ROL");

                    b.Property<int?>("IdTipodepago")
                        .HasColumnName("ID_TIPODEPAGO");

                    b.Property<int?>("IdTipodevendedor")
                        .HasColumnName("ID_TIPODEVENDEDOR");

                    b.Property<int?>("IdVendedor")
                        .HasColumnName("ID_VENDEDOR");

                    b.Property<string>("Nameuser")
                        .HasColumnName("NAMEUSER")
                        .HasColumnType("text");

                    b.Property<string>("NombreUsuario")
                        .HasColumnName("NOMBRE_USUARIO")
                        .HasColumnType("text");

                    b.Property<string>("PsswdUsuario")
                        .HasColumnName("PSSWD_USUARIO")
                        .HasColumnType("text");

                    b.Property<int?>("TelefonoUsuario")
                        .HasColumnName("TELEFONO_USUARIO");

                    b.HasKey("IdUsuario")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDireccion")
                        .HasName("VIVE_FK");

                    b.HasIndex("IdRol")
                        .HasName("PUEDESER_FK");

                    b.HasIndex("IdTipodepago")
                        .HasName("REALIZAPAGO_FK");

                    b.HasIndex("IdTipodevendedor")
                        .HasName("PUEDE_SER_FK");

                    b.HasIndex("IdVendedor")
                        .HasName("PUEDEREPRESENTAR2_FK");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Departamento", b =>
                {
                    b.HasOne("TiendaOnline.Models.Municipio", "IdMunicipioNavigation")
                        .WithMany("Departamento")
                        .HasForeignKey("IdMunicipio")
                        .HasConstraintName("FK_DEPARTAM_TIENE_MUNICIPI");
                });

            modelBuilder.Entity("TiendaOnline.Models.Detalledevendedor", b =>
                {
                    b.HasOne("TiendaOnline.Models.Direccion", "DirIdDireccionNavigation")
                        .WithMany("DetalledevendedorDirIdDireccionNavigation")
                        .HasForeignKey("DirIdDireccion")
                        .HasConstraintName("FK_DETALLED_DIRECCION_DIRECCIO");

                    b.HasOne("TiendaOnline.Models.Direccion", "IdDireccionNavigation")
                        .WithMany("DetalledevendedorIdDireccionNavigation")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK_DETALLED_UBICACION_DIRECCIO");

                    b.HasOne("TiendaOnline.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Detalledevendedor")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_DETALLED_POSEEDATO_EMPRESA");

                    b.HasOne("TiendaOnline.Models.Registrodeproductos", "IdRegistroNavigation")
                        .WithMany("Detalledevendedor")
                        .HasForeignKey("IdRegistro")
                        .HasConstraintName("FK_DETALLED_REGISTRA_REGISTRO");

                    b.HasOne("TiendaOnline.Models.Tarjeta", "IdTarjetaNavigation")
                        .WithMany("DetalledevendedorIdTarjetaNavigation")
                        .HasForeignKey("IdTarjeta")
                        .HasConstraintName("FK_DETALLED_PAGOYGANA_TARJETA");

                    b.HasOne("TiendaOnline.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Detalledevendedor")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_DETALLED_PUEDEREPR_USUARIO");

                    b.HasOne("TiendaOnline.Models.Tarjeta", "TarIdTarjetaNavigation")
                        .WithMany("DetalledevendedorTarIdTarjetaNavigation")
                        .HasForeignKey("TarIdTarjeta")
                        .HasConstraintName("FK_DETALLED_TARJETACO_TARJETA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Direccion", b =>
                {
                    b.HasOne("TiendaOnline.Models.Departamento", "IdDepartamentoNavigation")
                        .WithMany("Direccion")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_DIRECCIO_POSEE_DEPARTAM");

                    b.HasOne("TiendaOnline.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("Direccion")
                        .HasForeignKey("IdSucursal")
                        .HasConstraintName("FK_DIRECCIO_UBICACION_SUCURSAL");
                });

            modelBuilder.Entity("TiendaOnline.Models.Empresa", b =>
                {
                    b.HasOne("TiendaOnline.Models.Detalledevendedor", "IdVendedorNavigation")
                        .WithMany("Empresa")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK_EMPRESA_POSEEDATO_DETALLED");
                });

            modelBuilder.Entity("TiendaOnline.Models.Lineadeorden", b =>
                {
                    b.HasOne("TiendaOnline.Models.Orden", "IdOrdenNavigation")
                        .WithMany("Lineadeorden")
                        .HasForeignKey("IdOrden")
                        .HasConstraintName("FK_LINEADEO_SECOMPONE_ORDEN");

                    b.HasOne("TiendaOnline.Models.Producto", "IdProductoNavigation")
                        .WithMany("Lineadeorden")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_LINEADEO_TENDRA_PRODUCTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Metododeenvio", b =>
                {
                    b.HasOne("TiendaOnline.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Metododeenvio")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_METODODE_BRINDA_EMPRESA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Orden", b =>
                {
                    b.HasOne("TiendaOnline.Models.Cupon", "IdCuponNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdCupon")
                        .HasConstraintName("FK_ORDEN_DISMINUID_CUPON");

                    b.HasOne("TiendaOnline.Models.Estadodeorden", "IdEstadodeordenNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdEstadodeorden")
                        .HasConstraintName("FK_ORDEN_PUEDETENE_ESTADODE");

                    b.HasOne("TiendaOnline.Models.Metododeenvio", "IdMetododeenvioNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdMetododeenvio")
                        .HasConstraintName("FK_ORDEN_ENVIOS_METODODE");

                    b.HasOne("TiendaOnline.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Orden")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_ORDEN_SOLICITA_USUARIO");
                });

            modelBuilder.Entity("TiendaOnline.Models.ProdCarrito", b =>
                {
                    b.HasOne("TiendaOnline.Models.Carrito")
                        .WithMany("ProdCarrito")
                        .HasForeignKey("CarritoId");

                    b.HasOne("TiendaOnline.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoIdProducto");
                });

            modelBuilder.Entity("TiendaOnline.Models.Producto", b =>
                {
                    b.HasOne("TiendaOnline.Models.Detalledeproducto", "IdDetalleNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdDetalle")
                        .HasConstraintName("FK_PRODUCTO_DESCRITO_DETALLED");

                    b.HasOne("TiendaOnline.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_PRODUCTO_HACEPUBLI_EMPRESA");

                    b.HasOne("TiendaOnline.Models.Subcategoria", "IdSubcategoriaNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdSubcategoria")
                        .HasConstraintName("FK_PRODUCTO_ES_SUBCATEG");

                    b.HasOne("TiendaOnline.Models.Tipodedescuento", "IdTipodedescuentoNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdTipodedescuento")
                        .HasConstraintName("FK_PRODUCTO_DESCUENTO_TIPODEDE");

                    b.HasOne("TiendaOnline.Models.Detalledevendedor", "IdVendedorNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK_PRODUCTO_VENDIDOPO_DETALLED");
                });

            modelBuilder.Entity("TiendaOnline.Models.Registrodeproductos", b =>
                {
                    b.HasOne("TiendaOnline.Models.Producto", "IdProductoNavigation")
                        .WithMany("Registrodeproductos")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_REGISTRO_VENDE_PRODUCTO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Rol", b =>
                {
                    b.HasOne("TiendaOnline.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Rol")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_ROL_ESELUSUAR_USUARIO");
                });

            modelBuilder.Entity("TiendaOnline.Models.Subcategoria", b =>
                {
                    b.HasOne("TiendaOnline.Models.Categoria", "IdCategoriaNavigation")
                        .WithMany("Subcategoria")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_SUBCATEG_PERTENECE_CATEGORI");
                });

            modelBuilder.Entity("TiendaOnline.Models.Sucursal", b =>
                {
                    b.HasOne("TiendaOnline.Models.Direccion", "IdDireccionNavigation")
                        .WithMany("Sucursal")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK_SUCURSAL_UBICACION_DIRECCIO");

                    b.HasOne("TiendaOnline.Models.Empresa", "IdEmpresaNavigation")
                        .WithMany("Sucursal")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("FK_SUCURSAL_SEDISTRIB_EMPRESA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tarjeta", b =>
                {
                    b.HasOne("TiendaOnline.Models.Detalledevendedor", "IdVendedorNavigation")
                        .WithMany("Tarjeta")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK_TARJETA_TARJETACO_DETALLED");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tipodepago", b =>
                {
                    b.HasOne("TiendaOnline.Models.Paypal", "IdPaypalNavigation")
                        .WithMany("Tipodepago")
                        .HasForeignKey("IdPaypal")
                        .HasConstraintName("FK_TIPODEPA_SEREALIZA_PAYPAL");

                    b.HasOne("TiendaOnline.Models.Tarjeta", "IdTarjetaNavigation")
                        .WithMany("Tipodepago")
                        .HasForeignKey("IdTarjeta")
                        .HasConstraintName("FK_TIPODEPA_COMPRACON_TARJETA");
                });

            modelBuilder.Entity("TiendaOnline.Models.Tipodevendedor", b =>
                {
                    b.HasOne("TiendaOnline.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Tipodevendedor")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_TIPODEVE_PUEDE_SER_USUARIO");

                    b.HasOne("TiendaOnline.Models.Detalledevendedor", "IdVendedorNavigation")
                        .WithMany("Tipodevendedor")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK_TIPODEVE_SEDETALLA_DETALLED");
                });

            modelBuilder.Entity("TiendaOnline.Models.Usuario", b =>
                {
                    b.HasOne("TiendaOnline.Models.Direccion", "IdDireccionNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdDireccion")
                        .HasConstraintName("FK_USUARIO_VIVE_DIRECCIO");

                    b.HasOne("TiendaOnline.Models.Rol", "IdRolNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("FK_USUARIO_PUEDESER_ROL");

                    b.HasOne("TiendaOnline.Models.Tipodepago", "IdTipodepagoNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdTipodepago")
                        .HasConstraintName("FK_USUARIO_REALIZAPA_TIPODEPA");

                    b.HasOne("TiendaOnline.Models.Tipodevendedor", "IdTipodevendedorNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdTipodevendedor")
                        .HasConstraintName("FK_USUARIO_PUEDE_SER_TIPODEVE");

                    b.HasOne("TiendaOnline.Models.Detalledevendedor", "IdVendedorNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK_USUARIO_PUEDEREPR_DETALLED");
                });
#pragma warning restore 612, 618
        }
    }
}
